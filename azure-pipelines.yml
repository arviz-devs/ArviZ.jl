# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master
- releases/*

variables:
  PYTHON: "Conda"
  CMDSTAN_VERSION: "2.21.0"
  CMDSTAN_CACHE: "$(Agent.TempDirectory)/.cmdstan/"
  JULIA_CMDSTAN_HOME: "$(CMDSTAN_CACHE)/cmdstan-$(CMDSTAN_VERSION)/"

pool:
  vmImage: 'ubuntu-latest'

strategy:
  matrix:
    Julia_1_0:
      JULIA_VERSION: "1.0"
      ARVIZ_MASTER: false
      TYPE: "test"
    Julia_1_3:
      JULIA_VERSION: "1.3"
      ARVIZ_MASTER: false
      TYPE: "test"
    Julia_1_3_ArviZ_master:
      JULIA_VERSION: "1.3"
      ARVIZ_MASTER: true
      TYPE: "test"
    Julia_1_4:
      JULIA_VERSION: "1.4"
      ARVIZ_MASTER: false
      TYPE: "test"
    Julia_nightly:
      JULIA_VERSION: "nightly"
      ARVIZ_MASTER: false
      TYPE: "test"
    Julia_Documentation:
      JULIA_VERSION: "1.3"
      ARVIZ_MASTER: true
      TYPE: "doc"
steps:
- template: azurepipelines-install_cmdstan.yml
  parameters:
    version: $CMDSTAN_VERSION
    dir: $CMDSTAN_CACHE
- template: azurepipelines-install_julia.yml
  parameters:
    version: $JULIA_VERSION
- bash: |
    set -o xtrace
    if [[ $TYPE == test ]]; then
      ./julia-$(JULIA_VERSION)/bin/julia -e 'using InteractiveUtils; versioninfo()'
      ./julia-$(JULIA_VERSION)/bin/julia --project=@. -e 'using Pkg; Pkg.instantiate()'
      ./julia-$(JULIA_VERSION)/bin/julia --project=@. -e 'using Pkg; Pkg.test(coverage=true)'
    fi
  displayName: 'Run the tests'
- bash: |
    set -o xtrace
    if [[ $TYPE == doc ]]; then
      ./julia-$(JULIA_VERSION)/bin/julia --color=yes --project=docs/ docs/make.jl
    fi
  displayName: 'Build and deploy the docs'
