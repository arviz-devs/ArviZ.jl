# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master
- releases/*

variables:
  PYTHON: "Conda"
  CMDSTAN_VERSION: "2.21.0"
  CMDSTAN_CACHE: "$(Agent.TempDirectory)/.cmdstan/"
  JULIA_CMDSTAN_HOME: "$(CMDSTAN_CACHE)/cmdstan-$(CMDSTAN_VERSION)/"

pool:
  vmImage: 'ubuntu-latest'

stages:
- stage: Test
  jobs:
  - job: Releases # test released versions of ArviZ and Julia
    strategy:
      matrix:
        Julia_1_0:
          JULIA_VERSION: "1.0"
        Julia_1_2:
          JULIA_VERSION: "1.2"
        Julia_1_3:
          JULIA_VERSION: "1.3"
    steps:
    - template: azurepipelines-install_cmdstan.yml
      parameters:
        version: $CMDSTAN_VERSION
        dir: $CMDSTAN_CACHE
    - template: azurepipelines-install_julia.yml
      parameters:
        version: $JULIA_VERSION
    - bash: |
        set -o xtrace
        ./julia-$(JULIA_VERSION)/bin/julia -e 'using InteractiveUtils; versioninfo()'
        ./julia-$(JULIA_VERSION)/bin/julia --project=@. -e 'using Pkg; Pkg.instantiate()'
        ./julia-$(JULIA_VERSION)/bin/julia --project=@. -e 'using Pkg; Pkg.test(coverage=true)'
      displayName: 'Run the tests'
  - job: Futures # test future versions of ArviZ and Julia
    continueOnError: true # failures are allowed
    strategy:
      matrix:
        Julia_1_3_ArviZ_master:
          JULIA_VERSION: "1.3"
          ARVIZ_VERSION: master
        Julia_1_4:
          JULIA_VERSION: "1.4"
          ARVIZ_VERSION: release
        Julia_nightly:
          JULIA_VERSION: "nightly"
          ARVIZ_VERSION: release
    steps:
    - template: azurepipelines-install_cmdstan.yml
      parameters:
        version: $CMDSTAN_VERSION
        dir: $CMDSTAN_CACHE
    - template: azurepipelines-install_julia.yml
      parameters:
        version: $JULIA_VERSION
    - bash: | # install master if requested and not a tagged release
        set -o xtrace
        ./julia-$(JULIA_VERSION)/bin/julia -e 'using Pkg; Pkg.add("PyCall"); using PyCall; run(PyCall.python_cmd(`-m pip install git+https://github.com/pydata/xarray git+https://github.com/arviz-devs/arviz`))';
      condition: and(eq(variables.ARVIZ_VERSION, 'master'), not(startsWith(variables['build.sourceBranch'], 'refs/tags/')))
      displayName: 'Install arviz#master'
    - bash: |
        set -o xtrace
        ./julia-$(JULIA_VERSION)/bin/julia -e 'using InteractiveUtils; versioninfo()'
        ./julia-$(JULIA_VERSION)/bin/julia --project=@. -e 'using Pkg; Pkg.instantiate()'
        ./julia-$(JULIA_VERSION)/bin/julia --project=@. -e 'using Pkg; Pkg.test(coverage=true)'
      displayName: 'Run the tests'
- stage: Documentation # build and deploy documentation if tests passed
  jobs:
    - job: Build
      timeoutInMinutes: 0
      variables:
        JULIA_VERSION: "1.3"
      steps:
      - template: azurepipelines-install_cmdstan.yml
        parameters:
          version: $CMDSTAN_VERSION
          dir: $CMDSTAN_CACHE
      - template: azurepipelines-install_julia.yml
        parameters:
          version: $JULIA_VERSION
      - bash: | # install master if not a tagged release
          set -o xtrace
          ./julia-$(JULIA_VERSION)/bin/julia -e 'using Pkg; Pkg.add("PyCall"); using PyCall; run(PyCall.python_cmd(`-m pip install git+https://github.com/pydata/xarray git+https://github.com/arviz-devs/arviz`))';
        condition: not(startsWith(variables['build.sourceBranch'], 'refs/tags/'))
        displayName: 'Install arviz#master'
      - bash: |
          set -o xtrace
          ./julia-$(JULIA_VERSION)/bin/julia --color=yes --project=docs/ docs/make.jl
        displayName: 'Build and deploy the docs'
