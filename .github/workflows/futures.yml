name: Futures
on:
  push:
    branches: [main]
    tags: [v*]
  pull_request:
  schedule:
    - cron: "0 0 * * *"

env:
  PYTHON: "Conda" # use Julia's packaged Conda build for installing packages
  CMDSTAN_VERSION: "2.25.0"
  CMDSTAN_PATH: "${{ GITHUB.WORKSPACE }}/.cmdstan/"

jobs:
  test:
    name: Julia ${{ matrix.julia-version }} - ${{ matrix.arviz_version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        julia-version: ["1", "nightly"]
        os: [ubuntu-latest]
        include:
          - julia-version: "1"
            arviz_version: "main"
          - julia-version: "nightly"
            arviz_version: "release"
    steps:
      - uses: actions/checkout@v2
      - uses: julia-actions/setup-julia@v1
        with:
          version: ${{ matrix.julia-version }}
          arch: x64
      - name: Cache Julia artifacts
        uses: actions/cache@v2
        env:
          cache-name: cache-artifacts
        with:
          path: ~/.julia/artifacts
          key: ${{ runner.os }}-test-${{ env.cache-name }}-${{ hashFiles('**/Project.toml') }}
          restore-keys: |
            ${{ runner.os }}-test-${{ env.cache-name }}-
            ${{ runner.os }}-test-
            ${{ runner.os }}-
      - name: Cache CmdStan
        id: cache-cmdstan
        uses: actions/cache@v2
        with:
          path: ${{ env.CMDSTAN_PATH }}
          key: cmdstan-${{ env.CMDSTAN_VERSION }}-${{ runner.os }}
      - name: Download and build CmdStan
        if: steps.cache-cmdstan.outputs.cache-hit != 'true'
        run: |
          wget -P ${{ env.CMDSTAN_PATH }} https://github.com/stan-dev/cmdstan/releases/download/v${{ env.CMDSTAN_VERSION }}/cmdstan-${{ env.CMDSTAN_VERSION }}.tar.gz
          tar -xzpf ${{ env.CMDSTAN_PATH }}/cmdstan-${{ env.CMDSTAN_VERSION }}.tar.gz -C ${{ env.CMDSTAN_PATH }}
          make -C ${{ env.CMDSTAN_PATH }}/cmdstan-${{ env.CMDSTAN_VERSION }}/ build
        shell: bash
      - uses: julia-actions/julia-buildpkg@latest
        if: matrix.arviz_version != 'main' || github.event_name == 'create' && startsWith(github.ref, 'refs/tags/v')
      - name: "Install arviz#main"
        if: matrix.arviz_version == 'main' && github.event_name != 'create' && !startsWith(github.ref, 'refs/tags/v')
        run: |
          julia --color=yes -e 'using Pkg;
                                Pkg.add("PyCall");
                                using PyCall;
                                run(PyCall.python_cmd(`-m pip install git+https://github.com/pydata/xarray git+https://github.com/arviz-devs/arviz`))';
      - name: Install ArviZ dependencies
        run: |
          julia --color=yes --project -e 'using Pkg; Pkg.instantiate()'
          julia --color=yes --project -e 'using ArviZ;
                                          ArviZ.initialize_arviz();
                                          ArviZ.initialize_pandas();
                                          ArviZ.initialize_bokeh()'
          julia --color=yes --project -e 'using Conda;
                                          Conda.add("selenium");
                                          Conda.add("phantomjs")'
      - uses: julia-actions/julia-runtest@latest
        env:
          JULIA_CMDSTAN_HOME: ${{ env.CMDSTAN_PATH }}/cmdstan-${{ env.CMDSTAN_VERSION }}/ # required by CmdStan.jl
