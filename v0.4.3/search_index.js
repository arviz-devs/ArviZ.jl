var documenterSearchIndex = {"docs":
[{"location":"mpl_examples.html#Matplotlib-Example-Gallery","page":"Matplotlib","title":"Matplotlib Example Gallery","text":"","category":"section"},{"location":"mpl_examples.html","page":"Matplotlib","title":"Matplotlib","text":"note: Note\nThese examples are adapted from ArviZ's matplotlib gallery.","category":"page"},{"location":"mpl_examples.html#Autocorrelation-Plot","page":"Matplotlib","title":"Autocorrelation Plot","text":"","category":"section"},{"location":"mpl_examples.html","page":"Matplotlib","title":"Matplotlib","text":"using PyPlot\nfigure() #hide\nusing ArviZ\n\nArviZ.use_style(\"arviz-darkgrid\")\n\ndata = load_arviz_data(\"centered_eight\")\nplot_autocorr(data; var_names = (\"tau\", \"mu\"))\n\ngcf()","category":"page"},{"location":"mpl_examples.html","page":"Matplotlib","title":"Matplotlib","text":"See plot_autocorr","category":"page"},{"location":"mpl_examples.html#Compare-Plot","page":"Matplotlib","title":"Compare Plot","text":"","category":"section"},{"location":"mpl_examples.html","page":"Matplotlib","title":"Matplotlib","text":"using PyPlot\nfigure() #hide\nusing ArviZ\n\nArviZ.use_style(\"arviz-darkgrid\")\n\nmodel_compare = compare(Dict(\n    \"Centered 8 schools\" => load_arviz_data(\"centered_eight\"),\n    \"Non-centered 8 schools\" => load_arviz_data(\"non_centered_eight\"),\n))\nplot_compare(model_compare; figsize = (12, 4))\n\ngcf()","category":"page"},{"location":"mpl_examples.html","page":"Matplotlib","title":"Matplotlib","text":"See compare, plot_compare","category":"page"},{"location":"mpl_examples.html#Density-Plot","page":"Matplotlib","title":"Density Plot","text":"","category":"section"},{"location":"mpl_examples.html","page":"Matplotlib","title":"Matplotlib","text":"using PyPlot\nfigure() #hide\nusing ArviZ\n\nArviZ.use_style(\"arviz-darkgrid\")\n\ncentered_data = load_arviz_data(\"centered_eight\")\nnon_centered_data = load_arviz_data(\"non_centered_eight\")\nplot_density(\n    [centered_data, non_centered_data];\n    data_labels = [\"Centered\", \"Non Centered\"],\n    var_names = [\"theta\"],\n    shade = 0.1,\n)\n\ngcf()","category":"page"},{"location":"mpl_examples.html","page":"Matplotlib","title":"Matplotlib","text":"See plot_density","category":"page"},{"location":"mpl_examples.html#Dist-Plot","page":"Matplotlib","title":"Dist Plot","text":"","category":"section"},{"location":"mpl_examples.html","page":"Matplotlib","title":"Matplotlib","text":"using Random\nusing Distributions\nusing PyPlot\nfigure() #hide\nusing ArviZ\n\nRandom.seed!(308)\n\nArviZ.use_style(\"arviz-darkgrid\")\n\na = rand(Poisson(4), 1000)\nb = rand(Normal(0, 1), 1000)\n_, ax = plt.subplots(1, 2; figsize = (10, 4))\nplot_dist(a; color = \"C1\", label = \"Poisson\", ax = ax[1])\nplot_dist(b; color = \"C2\", label = \"Gaussian\", ax = ax[2])\n\ngcf()","category":"page"},{"location":"mpl_examples.html","page":"Matplotlib","title":"Matplotlib","text":"See plot_dist","category":"page"},{"location":"mpl_examples.html#ELPD-Plot","page":"Matplotlib","title":"ELPD Plot","text":"","category":"section"},{"location":"mpl_examples.html","page":"Matplotlib","title":"Matplotlib","text":"using PyPlot\nfigure() #hide\nusing ArviZ\n\nArviZ.use_style(\"arviz-darkgrid\")\n\nd1 = load_arviz_data(\"centered_eight\")\nd2 = load_arviz_data(\"non_centered_eight\")\nplot_elpd(Dict(\"Centered eight\" => d1, \"Non centered eight\" => d2); xlabels = true)\n\ngcf()","category":"page"},{"location":"mpl_examples.html","page":"Matplotlib","title":"Matplotlib","text":"See plot_elpd","category":"page"},{"location":"mpl_examples.html#Energy-Plot","page":"Matplotlib","title":"Energy Plot","text":"","category":"section"},{"location":"mpl_examples.html","page":"Matplotlib","title":"Matplotlib","text":"using PyPlot\nfigure() #hide\nusing ArviZ\n\nArviZ.use_style(\"arviz-darkgrid\")\n\ndata = load_arviz_data(\"centered_eight\")\nplot_energy(data; figsize = (12, 8))\n\ngcf()","category":"page"},{"location":"mpl_examples.html","page":"Matplotlib","title":"Matplotlib","text":"See plot_energy","category":"page"},{"location":"mpl_examples.html#ESS-Quantile-Plot","page":"Matplotlib","title":"ESS Quantile Plot","text":"","category":"section"},{"location":"mpl_examples.html","page":"Matplotlib","title":"Matplotlib","text":"using PyPlot\nfigure() #hide\nusing ArviZ\n\nArviZ.use_style(\"arviz-darkgrid\")\n\nidata = load_arviz_data(\"radon\")\nplot_ess(idata; var_names = [\"b\"], kind = \"evolution\")\n\ngcf()","category":"page"},{"location":"mpl_examples.html","page":"Matplotlib","title":"Matplotlib","text":"See plot_ess","category":"page"},{"location":"mpl_examples.html#ESS-Local-Plot","page":"Matplotlib","title":"ESS Local Plot","text":"","category":"section"},{"location":"mpl_examples.html","page":"Matplotlib","title":"Matplotlib","text":"using PyPlot\nfigure() #hide\nusing ArviZ\n\nArviZ.use_style(\"arviz-darkgrid\")\n\nidata = load_arviz_data(\"non_centered_eight\")\nplot_ess(\n    idata;\n    var_names = [\"mu\"],\n    kind = \"local\",\n    marker = \"_\",\n    ms = 20,\n    mew = 2,\n    rug = true,\n)\n\ngcf()","category":"page"},{"location":"mpl_examples.html","page":"Matplotlib","title":"Matplotlib","text":"See plot_ess","category":"page"},{"location":"mpl_examples.html#ESS-Quantile-Plot-2","page":"Matplotlib","title":"ESS Quantile Plot","text":"","category":"section"},{"location":"mpl_examples.html","page":"Matplotlib","title":"Matplotlib","text":"using PyPlot\nfigure() #hide\nusing ArviZ\n\nArviZ.use_style(\"arviz-darkgrid\")\n\nidata = load_arviz_data(\"radon\")\nplot_ess(idata; var_names = [\"sigma_y\"], kind = \"quantile\", color = \"C4\")\n\ngcf()","category":"page"},{"location":"mpl_examples.html","page":"Matplotlib","title":"Matplotlib","text":"See plot_ess","category":"page"},{"location":"mpl_examples.html#Forest-Plot","page":"Matplotlib","title":"Forest Plot","text":"","category":"section"},{"location":"mpl_examples.html","page":"Matplotlib","title":"Matplotlib","text":"using PyPlot\nfigure() #hide\nusing ArviZ\n\nArviZ.use_style(\"arviz-darkgrid\")\n\ncentered_data = load_arviz_data(\"centered_eight\")\nnon_centered_data = load_arviz_data(\"non_centered_eight\")\nplot_forest(\n    [centered_data, non_centered_data];\n    model_names = [\"Centered\", \"Non Centered\"],\n    var_names = [\"mu\"],\n)\ntitle(\"Estimated theta for eight schools model\")\n\ngcf()","category":"page"},{"location":"mpl_examples.html","page":"Matplotlib","title":"Matplotlib","text":"See plot_forest","category":"page"},{"location":"mpl_examples.html#Ridge-Plot","page":"Matplotlib","title":"Ridge Plot","text":"","category":"section"},{"location":"mpl_examples.html","page":"Matplotlib","title":"Matplotlib","text":"using PyPlot\nfigure() #hide\nusing ArviZ\n\nArviZ.use_style(\"arviz-darkgrid\")\n\nrugby_data = load_arviz_data(\"rugby\")\nplot_forest(\n    rugby_data;\n    kind = \"ridgeplot\",\n    var_names = [\"defs\"],\n    linewidth = 4,\n    combined = true,\n    ridgeplot_overlap = 1.5,\n    colors = \"blue\",\n    figsize = (9, 4),\n)\ntitle(\"Relative defensive strength\\nof Six Nation rugby teams\")\n\ngcf()","category":"page"},{"location":"mpl_examples.html","page":"Matplotlib","title":"Matplotlib","text":"See plot_forest","category":"page"},{"location":"mpl_examples.html#Plot-HDI","page":"Matplotlib","title":"Plot HDI","text":"","category":"section"},{"location":"mpl_examples.html","page":"Matplotlib","title":"Matplotlib","text":"using Random\nusing PyPlot\nfigure() #hide\nusing ArviZ\n\nRandom.seed!(308)\n\nArviZ.use_style(\"arviz-darkgrid\")\n\nx_data = randn(100)\ny_data = 2 .+ x_data .* 0.5\ny_data_rep = 0.5 .* randn(200, 100) .+ transpose(y_data)\nplot(x_data, y_data; color = \"C6\")\nplot_hdi(x_data, y_data_rep; color = \"k\", plot_kwargs = Dict(\"ls\" => \"--\"))\n\ngcf()","category":"page"},{"location":"mpl_examples.html","page":"Matplotlib","title":"Matplotlib","text":"See plot_hdi","category":"page"},{"location":"mpl_examples.html#Joint-Plot","page":"Matplotlib","title":"Joint Plot","text":"","category":"section"},{"location":"mpl_examples.html","page":"Matplotlib","title":"Matplotlib","text":"using PyPlot\nfigure() #hide\nusing ArviZ\n\nArviZ.use_style(\"arviz-darkgrid\")\n\ndata = load_arviz_data(\"non_centered_eight\")\nplot_pair(\n    data;\n    var_names = [\"theta\"],\n    coords = Dict(\"school\" => [\"Choate\", \"Phillips Andover\"]),\n    kind = \"hexbin\",\n    marginals = true,\n    figsize = (10, 10),\n)\n\ngcf()","category":"page"},{"location":"mpl_examples.html","page":"Matplotlib","title":"Matplotlib","text":"See plot_pair","category":"page"},{"location":"mpl_examples.html#KDE-Plot","page":"Matplotlib","title":"KDE Plot","text":"","category":"section"},{"location":"mpl_examples.html","page":"Matplotlib","title":"Matplotlib","text":"using PyPlot\nfigure() #hide\nusing ArviZ\n\nArviZ.use_style(\"arviz-darkgrid\")\n\ndata = load_arviz_data(\"centered_eight\")\n\n## Combine different posterior draws from different chains\nobs = data.posterior_predictive[\"obs\"].values\nsize_obs = size(obs)\ny_hat = reshape(obs, prod(size_obs[1:2]), size_obs[3:end]...)\n\nplot_kde(\n    y_hat;\n    label = \"Estimated Effect\\n of SAT Prep\",\n    rug = true,\n    plot_kwargs = Dict(\"linewidth\" => 2, \"color\" => \"black\"),\n    rug_kwargs = Dict(\"color\" => \"black\"),\n)\n\ngcf()","category":"page"},{"location":"mpl_examples.html","page":"Matplotlib","title":"Matplotlib","text":"See plot_kde","category":"page"},{"location":"mpl_examples.html#d-KDE","page":"Matplotlib","title":"2d KDE","text":"","category":"section"},{"location":"mpl_examples.html","page":"Matplotlib","title":"Matplotlib","text":"using Random\nusing PyPlot\nfigure() #hide\nusing ArviZ\n\nRandom.seed!(308)\n\nArviZ.use_style(\"arviz-darkgrid\")\n\nplot_kde(rand(100), rand(100))\n\ngcf()","category":"page"},{"location":"mpl_examples.html","page":"Matplotlib","title":"Matplotlib","text":"See plot_kde","category":"page"},{"location":"mpl_examples.html#KDE-Quantiles-Plot","page":"Matplotlib","title":"KDE Quantiles Plot","text":"","category":"section"},{"location":"mpl_examples.html","page":"Matplotlib","title":"Matplotlib","text":"using Random\nusing Distributions\nusing PyPlot\nfigure() #hide\nusing ArviZ\n\nRandom.seed!(308)\n\nArviZ.use_style(\"arviz-darkgrid\")\n\ndist = rand(Beta(rand(Uniform(0.5, 10)), 5), 1000)\nplot_kde(dist; quantiles = [0.25, 0.5, 0.75])\n\ngcf()","category":"page"},{"location":"mpl_examples.html","page":"Matplotlib","title":"Matplotlib","text":"See plot_kde","category":"page"},{"location":"mpl_examples.html#Pareto-Shape-Plot","page":"Matplotlib","title":"Pareto Shape Plot","text":"","category":"section"},{"location":"mpl_examples.html","page":"Matplotlib","title":"Matplotlib","text":"using PyPlot\nfigure() #hide\nusing ArviZ\n\nArviZ.use_style(\"arviz-darkgrid\")\n\nidata = load_arviz_data(\"radon\")\nloo_data = loo(idata; pointwise = true)\nplot_khat(loo_data; show_bins = true)\n\ngcf()","category":"page"},{"location":"mpl_examples.html","page":"Matplotlib","title":"Matplotlib","text":"See loo, plot_khat","category":"page"},{"location":"mpl_examples.html#LOO-PIT-ECDF-Plot","page":"Matplotlib","title":"LOO-PIT ECDF Plot","text":"","category":"section"},{"location":"mpl_examples.html","page":"Matplotlib","title":"Matplotlib","text":"using PyPlot\nfigure() #hide\nusing ArviZ\n\nArviZ.use_style(\"arviz-darkgrid\")\n\nidata = load_arviz_data(\"radon\")\nlog_like = transpose(idata.sample_stats.log_likelihood.sel(chain = 0).values)\nlog_weights = psislw(-log_like)[1]\nplot_loo_pit(idata; y = \"y_like\", log_weights = log_weights, ecdf = true, color = \"maroon\")\n\ngcf()","category":"page"},{"location":"mpl_examples.html","page":"Matplotlib","title":"Matplotlib","text":"See psislw, plot_loo_pit","category":"page"},{"location":"mpl_examples.html#LOO-PIT-Overlay-Plot","page":"Matplotlib","title":"LOO-PIT Overlay Plot","text":"","category":"section"},{"location":"mpl_examples.html","page":"Matplotlib","title":"Matplotlib","text":"using PyPlot\nfigure() #hide\nusing ArviZ\n\nArviZ.use_style(\"arviz-darkgrid\")\n\nidata = load_arviz_data(\"non_centered_eight\")\nplot_loo_pit(idata = idata, y = \"obs\", color = \"indigo\")\n\ngcf()","category":"page"},{"location":"mpl_examples.html","page":"Matplotlib","title":"Matplotlib","text":"See plot_loo_pit","category":"page"},{"location":"mpl_examples.html#Quantile-Monte-Carlo-Standard-Error-Plot","page":"Matplotlib","title":"Quantile Monte Carlo Standard Error Plot","text":"","category":"section"},{"location":"mpl_examples.html","page":"Matplotlib","title":"Matplotlib","text":"using PyPlot\nfigure() #hide\nusing ArviZ\n\nArviZ.use_style(\"arviz-darkgrid\")\n\ndata = load_arviz_data(\"centered_eight\")\nplot_mcse(data; var_names = [\"tau\", \"mu\"], rug = true, extra_methods = true)\n\ngcf()","category":"page"},{"location":"mpl_examples.html","page":"Matplotlib","title":"Matplotlib","text":"See plot_mcse","category":"page"},{"location":"mpl_examples.html#Quantile-MCSE-Errobar-Plot","page":"Matplotlib","title":"Quantile MCSE Errobar Plot","text":"","category":"section"},{"location":"mpl_examples.html","page":"Matplotlib","title":"Matplotlib","text":"using PyPlot\nfigure() #hide\nusing ArviZ\n\nArviZ.use_style(\"arviz-darkgrid\")\n\ndata = load_arviz_data(\"radon\")\nplot_mcse(data; var_names = [\"sigma_a\"], color = \"C4\", errorbar = true)\n\ngcf()","category":"page"},{"location":"mpl_examples.html","page":"Matplotlib","title":"Matplotlib","text":"See plot_mcse","category":"page"},{"location":"mpl_examples.html#Pair-Plot","page":"Matplotlib","title":"Pair Plot","text":"","category":"section"},{"location":"mpl_examples.html","page":"Matplotlib","title":"Matplotlib","text":"using PyPlot\nfigure() #hide\nusing ArviZ\n\nArviZ.use_style(\"arviz-darkgrid\")\n\ncentered = load_arviz_data(\"centered_eight\")\ncoords = Dict(\"school\" => [\"Choate\", \"Deerfield\"])\nplot_pair(\n    centered;\n    var_names = [\"theta\", \"mu\", \"tau\"],\n    coords = coords,\n    divergences = true,\n    textsize = 22,\n)\n\ngcf()","category":"page"},{"location":"mpl_examples.html","page":"Matplotlib","title":"Matplotlib","text":"See plot_pair","category":"page"},{"location":"mpl_examples.html#Hexbin-Pair-Plot","page":"Matplotlib","title":"Hexbin Pair Plot","text":"","category":"section"},{"location":"mpl_examples.html","page":"Matplotlib","title":"Matplotlib","text":"using PyPlot\nfigure() #hide\nusing ArviZ\n\nArviZ.use_style(\"arviz-darkgrid\")\n\ncentered = load_arviz_data(\"centered_eight\")\ncoords = Dict(\"school\" => [\"Choate\", \"Deerfield\"])\nplot_pair(\n    centered;\n    var_names = [\"theta\", \"mu\", \"tau\"],\n    kind = \"hexbin\",\n    coords = coords,\n    colorbar = true,\n    divergences = true,\n)\n\ngcf()","category":"page"},{"location":"mpl_examples.html","page":"Matplotlib","title":"Matplotlib","text":"See plot_pair","category":"page"},{"location":"mpl_examples.html#KDE-Pair-Plot","page":"Matplotlib","title":"KDE Pair Plot","text":"","category":"section"},{"location":"mpl_examples.html","page":"Matplotlib","title":"Matplotlib","text":"using PyPlot\nfigure() #hide\nusing ArviZ\n\nArviZ.use_style(\"arviz-darkgrid\")\n\ncentered = load_arviz_data(\"centered_eight\")\ncoords = Dict(\"school\" => [\"Choate\", \"Deerfield\"])\nplot_pair(\n    centered;\n    var_names = [\"theta\", \"mu\", \"tau\"],\n    kind = \"kde\",\n    coords = coords,\n    divergences = true,\n    textsize = 22,\n)\n\ngcf()","category":"page"},{"location":"mpl_examples.html","page":"Matplotlib","title":"Matplotlib","text":"See plot_pair","category":"page"},{"location":"mpl_examples.html#Point-Estimate-Pair-Plot","page":"Matplotlib","title":"Point Estimate Pair Plot","text":"","category":"section"},{"location":"mpl_examples.html","page":"Matplotlib","title":"Matplotlib","text":"using PyPlot\nfigure() #hide\nusing ArviZ\n\nArviZ.use_style(\"arviz-darkgrid\")\n\ncentered = load_arviz_data(\"centered_eight\")\ncoords = Dict(\"school\" => [\"Choate\", \"Deerfield\"])\nplot_pair(\n    centered;\n    var_names = [\"mu\", \"theta\"],\n    kind = [\"scatter\", \"kde\"],\n    kde_kwargs = Dict(\"fill_last\" => false),\n    marginals = true,\n    coords = coords,\n    point_estimate = \"median\",\n    figsize = (10, 8),\n)\n\ngcf()","category":"page"},{"location":"mpl_examples.html","page":"Matplotlib","title":"Matplotlib","text":"See plot_pair","category":"page"},{"location":"mpl_examples.html#Parallel-Plot","page":"Matplotlib","title":"Parallel Plot","text":"","category":"section"},{"location":"mpl_examples.html","page":"Matplotlib","title":"Matplotlib","text":"using PyPlot\nfigure() #hide\nusing ArviZ\n\nArviZ.use_style(\"arviz-darkgrid\")\n\ndata = load_arviz_data(\"centered_eight\")\nax = plot_parallel(data; var_names = [\"theta\", \"tau\", \"mu\"])\nax.set_xticklabels(ax.get_xticklabels(); rotation = 70)\ndraw()\n\ngcf()","category":"page"},{"location":"mpl_examples.html","page":"Matplotlib","title":"Matplotlib","text":"See plot_parallel","category":"page"},{"location":"mpl_examples.html#Posterior-Plot","page":"Matplotlib","title":"Posterior Plot","text":"","category":"section"},{"location":"mpl_examples.html","page":"Matplotlib","title":"Matplotlib","text":"using PyPlot\nfigure() #hide\nusing ArviZ\n\nArviZ.use_style(\"arviz-darkgrid\")\n\ndata = load_arviz_data(\"centered_eight\")\ncoords = Dict(\"school\" => [\"Choate\"])\nplot_posterior(data; var_names = [\"mu\", \"theta\"], coords = coords, rope = (-1, 1))\n\ngcf()","category":"page"},{"location":"mpl_examples.html","page":"Matplotlib","title":"Matplotlib","text":"See plot_posterior","category":"page"},{"location":"mpl_examples.html#Posterior-Predictive-Check-Plot","page":"Matplotlib","title":"Posterior Predictive Check Plot","text":"","category":"section"},{"location":"mpl_examples.html","page":"Matplotlib","title":"Matplotlib","text":"using PyPlot\nfigure() #hide\nusing ArviZ\n\nArviZ.use_style(\"arviz-darkgrid\")\n\ndata = load_arviz_data(\"non_centered_eight\")\nplot_ppc(\n    data;\n    data_pairs = Dict(\"obs\" => \"obs\"),\n    alpha = 0.03,\n    figsize = (12, 6),\n    textsize = 14,\n)\n\ngcf()","category":"page"},{"location":"mpl_examples.html","page":"Matplotlib","title":"Matplotlib","text":"See plot_ppc","category":"page"},{"location":"mpl_examples.html#Posterior-Predictive-Check-Cumulative-Plot","page":"Matplotlib","title":"Posterior Predictive Check Cumulative Plot","text":"","category":"section"},{"location":"mpl_examples.html","page":"Matplotlib","title":"Matplotlib","text":"using PyPlot\nfigure() #hide\nusing ArviZ\n\nArviZ.use_style(\"arviz-darkgrid\")\n\ndata = load_arviz_data(\"non_centered_eight\")\nplot_ppc(data; alpha = 0.3, kind = \"cumulative\", figsize = (12, 6), textsize = 14)\n\ngcf()","category":"page"},{"location":"mpl_examples.html","page":"Matplotlib","title":"Matplotlib","text":"See plot_ppc","category":"page"},{"location":"mpl_examples.html#Rank-Plot","page":"Matplotlib","title":"Rank Plot","text":"","category":"section"},{"location":"mpl_examples.html","page":"Matplotlib","title":"Matplotlib","text":"using PyPlot\nfigure() #hide\nusing ArviZ\n\nArviZ.use_style(\"arviz-darkgrid\")\n\ndata = load_arviz_data(\"centered_eight\")\nplot_rank(data; var_names = (\"tau\", \"mu\"))\n\ngcf()","category":"page"},{"location":"mpl_examples.html","page":"Matplotlib","title":"Matplotlib","text":"See plot_rank","category":"page"},{"location":"mpl_examples.html#Trace-Plot","page":"Matplotlib","title":"Trace Plot","text":"","category":"section"},{"location":"mpl_examples.html","page":"Matplotlib","title":"Matplotlib","text":"using PyPlot\nfigure() #hide\nusing ArviZ\n\nArviZ.use_style(\"arviz-darkgrid\")\n\ndata = load_arviz_data(\"non_centered_eight\")\nplot_trace(data; var_names = (\"tau\", \"mu\"))\n\ngcf()","category":"page"},{"location":"mpl_examples.html","page":"Matplotlib","title":"Matplotlib","text":"See plot_trace","category":"page"},{"location":"mpl_examples.html#Violin-Plot","page":"Matplotlib","title":"Violin Plot","text":"","category":"section"},{"location":"mpl_examples.html","page":"Matplotlib","title":"Matplotlib","text":"using PyPlot\nfigure() #hide\nusing ArviZ\n\nArviZ.use_style(\"arviz-darkgrid\")\n\ndata = load_arviz_data(\"non_centered_eight\")\nplot_violin(data; var_names = [\"mu\", \"tau\"])\n\ngcf()","category":"page"},{"location":"mpl_examples.html","page":"Matplotlib","title":"Matplotlib","text":"See plot_violin","category":"page"},{"location":"mpl_examples.html#Styles","page":"Matplotlib","title":"Styles","text":"","category":"section"},{"location":"mpl_examples.html","page":"Matplotlib","title":"Matplotlib","text":"using PyPlot\nfigure() #hide\nusing PyCall\nusing Distributions\nusing ArviZ\n\nx = range(0, 1; length = 100)\ndist = pdf.(Beta(2, 5), x)\n\nstyle_list = [\n    \"default\",\n    [\"default\", \"arviz-colors\"],\n    \"arviz-darkgrid\",\n    \"arviz-whitegrid\",\n    \"arviz-white\",\n]\n\nfig = figure(figsize = (12, 12))\nfor (idx, style) in enumerate(style_list)\n    @pywith plt.style.context(style) begin\n        ax = fig.add_subplot(3, 2, idx; label = idx)\n        for i = 0:9\n            ax.plot(x, dist .- i, \"C$i\", label = \"C$i\")\n        end\n        ax.set_title(style)\n        ax.set_xlabel(\"x\")\n        ax.set_ylabel(\"f(x)\"; rotation = 0, labelpad = 15)\n        ax.legend(bbox_to_anchor = (1, 1))\n        draw()\n    end\nend\ntight_layout()\n\ngcf()","category":"page"},{"location":"api.html#api","page":"API","title":"API Overview","text":"","category":"section"},{"location":"api.html#plots-api","page":"API","title":"Plots","text":"","category":"section"},{"location":"api.html","page":"API","title":"API","text":"Name Description\nplot_autocorr Bar plot of the autocorrelation function for a sequence of data.\nplot_compare Summary plot for model comparison.\nplot_density Generate KDE plots for continuous variables and histograms for discrete ones.\nplot_dist Plot distribution as histogram or kernel density estimates.\nplot_elpd Plot a scatter or hexbin matrix of the sampled parameters.\nplot_energy Plot energy transition distribution and marginal energy distribution in HMC algorithms.\nplot_ess Plot quantile, local or evolution of effective sample sizes (ESS).\nplot_forest Forest plot to compare HDI intervals from a number of distributions.\nplot_hdi Plot HDI intervals for regression data.\nplot_kde 1D or 2D KDE plot taking into account boundary conditions.\nplot_khat Plot Pareto tail indices.\nplot_loo_pit Plot Leave-One-Out (LOO) probability integral transformation (PIT) predictive checks.\nplot_mcse Plot quantile, local or evolution of effective sample sizes (ESS).\nplot_pair Plot a scatter, kde and/or hexbin matrix with (optional) marginals on the diagonal.\nplot_parallel Plot parallel coordinates plot showing posterior points with and without divergences.\nplot_posterior Plot Posterior densities in the style of John K.\nplot_ppc Plot for posterior predictive checks.\nplot_rank Plot rank order statistics of chains.\nplot_trace Plot distribution (histogram or kernel density estimates) and sampled values.\nplot_violin Plot posterior of traces as violin plot.","category":"page"},{"location":"api.html#stats-api","page":"API","title":"Stats","text":"","category":"section"},{"location":"api.html","page":"API","title":"API","text":"Name Description\nsummarystats Compute summary statistics on an InferenceData\ncompare Compare models based on WAIC or LOO cross-validation.\nhdi Calculate highest density interval (HDI) of array for given probability.\nloo Pareto-smoothed importance sampling leave-one-out (LOO) cross-validation.\nloo_pit Compute leave-one-out probability integral transform (PIT) values.\npsislw Pareto smoothed importance sampling (PSIS).\nr2_score R^2 for Bayesian regression models.\nwaic Calculate the widely available information criterion (WAIC).","category":"page"},{"location":"api.html#diagnostics-api","page":"API","title":"Diagnostics","text":"","category":"section"},{"location":"api.html","page":"API","title":"API","text":"Name Description\nbfmi Calculate the estimated Bayesian fraction of missing information (BFMI).\ngeweke Compute z-scores for convergence diagnostics.\ness Calculate estimate of the effective sample size (ESS).\nrhat Compute estimate of rank normalized split-hatR for a set of traces.\nmcse Calculate Markov Chain Standard Error statistic (MCSE).","category":"page"},{"location":"api.html#statsutils-api","page":"API","title":"Stats utils","text":"","category":"section"},{"location":"api.html","page":"API","title":"API","text":"Name Description\nautocov Compute autocovariance estimates for every lag for the input array.\nautocorr Compute autocorrelation using FFT for every lag for the input array.\nmake_ufunc Make ufunc from a function taking 1D array input.\nwrap_xarray_ufunc Wrap make_ufunc with xarray.apply_ufunc.","category":"page"},{"location":"api.html#data-api","page":"API","title":"Data","text":"","category":"section"},{"location":"api.html","page":"API","title":"API","text":"Name Description\nInferenceData Container for inference data storage using xarray.\nconvert_to_inference_data Convert a supported object to an InferenceData.\nload_arviz_data Load a local or remote pre-made dataset.\nto_netcdf Save dataset as a netcdf file.\nfrom_netcdf Load netcdf file back into an InferenceData.\nfrom_namedtuple Convert NamedTuple data into an InferenceData.\nfrom_dict Convert Dict data into an InferenceData.\nfrom_cmdstan Convert CmdStan data into an InferenceData.\nfrom_mcmcchains Convert MCMCChains data into an InferenceData.\nconcat Concatenate InferenceData objects.\nconcat! Concatenate InferenceData objects in-place.","category":"page"},{"location":"api.html#utils-api","page":"API","title":"Utils","text":"","category":"section"},{"location":"api.html","page":"API","title":"API","text":"Name Description\nwith_interactive_backend Change plotting backend temporarily.","category":"page"},{"location":"api.html#rcparams-api","page":"API","title":"rcParams","text":"","category":"section"},{"location":"api.html","page":"API","title":"API","text":"Name Description\nrcParams Access ArviZ's matplotlib-style rc settings and change them long-term.\nwith_rc_context Change ArviZ's rc settings temporarily.","category":"page"},{"location":"quickstart.html#quickstart","page":"Quickstart","title":"ArviZ.jl Quickstart","text":"","category":"section"},{"location":"quickstart.html","page":"Quickstart","title":"Quickstart","text":"note: Note\nThis tutorial is adapted from ArviZ's quickstart.","category":"page"},{"location":"quickstart.html","page":"Quickstart","title":"Quickstart","text":"import MCMCChains\nturing_chns = read(\n    \"../src/assets/turing_centered_eight_chains.jls\",\n    MCMCChains.Chains,\n)","category":"page"},{"location":"quickstart.html","page":"Quickstart","title":"Quickstart","text":"using ArviZ\nusing PyPlot\n\n# ArviZ ships with style sheets!\nArviZ.use_style(\"arviz-darkgrid\")","category":"page"},{"location":"quickstart.html#Get-started-with-plotting","page":"Quickstart","title":"Get started with plotting","text":"","category":"section"},{"location":"quickstart.html","page":"Quickstart","title":"Quickstart","text":"ArviZ.jl is designed to be used with libraries like CmdStan, Turing.jl, and Soss.jl but works fine with raw arrays.","category":"page"},{"location":"quickstart.html","page":"Quickstart","title":"Quickstart","text":"using Random\n\nrng = Random.MersenneTwister(42)\nplot_posterior(randn(rng, 100_000));\ngcf()","category":"page"},{"location":"quickstart.html","page":"Quickstart","title":"Quickstart","text":"Plotting a dictionary of arrays, ArviZ.jl will interpret each key as the name of a different random variable. Each row of an array is treated as an independent series of draws from the variable, called a chain. Below, we have 10 chains of 50 draws each for four different distributions.","category":"page"},{"location":"quickstart.html","page":"Quickstart","title":"Quickstart","text":"using Distributions\n\ns = (10, 50)\nplot_forest(Dict(\n    \"normal\" => randn(rng, s),\n    \"gumbel\" => rand(rng, Gumbel(), s),\n    \"student t\" => rand(rng, TDist(6), s),\n    \"exponential\" => rand(rng, Exponential(), s)\n));\ngcf()","category":"page"},{"location":"quickstart.html#Plotting-with-MCMCChains.jl's-Chains-objects-produced-by-Turing.jl","page":"Quickstart","title":"Plotting with MCMCChains.jl's Chains objects produced by Turing.jl","text":"","category":"section"},{"location":"quickstart.html","page":"Quickstart","title":"Quickstart","text":"ArviZ is designed to work well with high dimensional, labelled data. Consider the eight schools model, which roughly tries to measure the effectiveness of SAT classes at eight different schools. To show off ArviZ's labelling, I give the schools the names of a different eight schools.","category":"page"},{"location":"quickstart.html","page":"Quickstart","title":"Quickstart","text":"This model is small enough to write down, is hierarchical, and uses labelling. Additionally, a centered parameterization causes divergences (which are interesting for illustration).","category":"page"},{"location":"quickstart.html","page":"Quickstart","title":"Quickstart","text":"First we create our data and set some sampling parameters.","category":"page"},{"location":"quickstart.html","page":"Quickstart","title":"Quickstart","text":"J = 8\ny = [28.0, 8.0, -3.0, 7.0, -1.0, 1.0, 18.0, 12.0]\nσ = [15.0, 10.0, 16.0, 11.0, 9.0, 11.0, 10.0, 18.0]\nschools = [\n    \"Choate\",\n    \"Deerfield\",\n    \"Phillips Andover\",\n    \"Phillips Exeter\",\n    \"Hotchkiss\",\n    \"Lawrenceville\",\n    \"St. Paul's\",\n    \"Mt. Hermon\"\n];\n\nnwarmup, nsamples, nchains = 1000, 1000, 4;\nnothing # hide","category":"page"},{"location":"quickstart.html","page":"Quickstart","title":"Quickstart","text":"Now we write and run the model using Turing:","category":"page"},{"location":"quickstart.html","page":"Quickstart","title":"Quickstart","text":"using Turing\n\nTuring.@model turing_model(\n    J,\n    y,\n    σ,\n    ::Type{TV} = Vector{Float64},\n) where {TV} = begin\n    μ ~ Normal(0, 5)\n    τ ~ truncated(Cauchy(0, 5), 0, Inf)\n    θ = TV(undef, J)\n    θ .~ Normal(μ, τ)\n    y ~ MvNormal(θ, σ)\nend\n\nparam_mod = turing_model(J, y, σ)\nsampler = NUTS(nwarmup, 0.8)\n\nrng = Random.MersenneTwister(5130)\nturing_chns = psample(\n    param_mod,\n    sampler,\n    nwarmup + nsamples,\n    nchains;\n    progress = false,\n);","category":"page"},{"location":"quickstart.html","page":"Quickstart","title":"Quickstart","text":"Most ArviZ functions work fine with Chains objects from Turing:","category":"page"},{"location":"quickstart.html","page":"Quickstart","title":"Quickstart","text":"plot_autocorr(turing_chns; var_names = [\"μ\", \"τ\"]);\ngcf()","category":"page"},{"location":"quickstart.html#Convert-to-InferenceData","page":"Quickstart","title":"Convert to InferenceData","text":"","category":"section"},{"location":"quickstart.html","page":"Quickstart","title":"Quickstart","text":"For much more powerful querying, analysis and plotting, we can use built-in ArviZ utilities to convert Chains objects to xarray datasets. Note we are also giving some information about labelling.","category":"page"},{"location":"quickstart.html","page":"Quickstart","title":"Quickstart","text":"ArviZ is built to work with InferenceData (a netcdf datastore that loads data into xarray datasets), and the more groups it has access to, the more powerful analyses it can perform.","category":"page"},{"location":"quickstart.html","page":"Quickstart","title":"Quickstart","text":"idata = from_mcmcchains(\n    turing_chns,\n#     prior = prior, # hide\n#     posterior_predictive = posterior_predictive, # hide\n    coords = Dict(\"school\" => schools),\n    dims = Dict(\n        \"y\" => [\"school\"],\n        \"σ\" => [\"school\"],\n        \"θ\" => [\"school\"],\n    ),\n    library = \"Turing\",\n)","category":"page"},{"location":"quickstart.html","page":"Quickstart","title":"Quickstart","text":"Each group is an ArviZ.Dataset (a thinly wrapped xarray.Dataset). We can view a summary of the dataset.","category":"page"},{"location":"quickstart.html","page":"Quickstart","title":"Quickstart","text":"idata.posterior","category":"page"},{"location":"quickstart.html","page":"Quickstart","title":"Quickstart","text":"Here is a plot of the trace. Note the intelligent labels.","category":"page"},{"location":"quickstart.html","page":"Quickstart","title":"Quickstart","text":"plot_trace(idata);\ngcf()","category":"page"},{"location":"quickstart.html","page":"Quickstart","title":"Quickstart","text":"We can also generate summary stats","category":"page"},{"location":"quickstart.html","page":"Quickstart","title":"Quickstart","text":"summarystats(idata)","category":"page"},{"location":"quickstart.html","page":"Quickstart","title":"Quickstart","text":"and examine the energy distribution of the Hamiltonian sampler","category":"page"},{"location":"quickstart.html","page":"Quickstart","title":"Quickstart","text":"plot_energy(idata);\ngcf()","category":"page"},{"location":"quickstart.html#Plotting-with-CmdStan.jl-outputs","page":"Quickstart","title":"Plotting with CmdStan.jl outputs","text":"","category":"section"},{"location":"quickstart.html","page":"Quickstart","title":"Quickstart","text":"CmdStan.jl and StanSample.jl also default to producing Chains outputs, and we can easily plot these chains.","category":"page"},{"location":"quickstart.html","page":"Quickstart","title":"Quickstart","text":"Here is the same centered eight schools model:","category":"page"},{"location":"quickstart.html","page":"Quickstart","title":"Quickstart","text":"using CmdStan, MCMCChains\n\nschools_code = \"\"\"\ndata {\n  int<lower=0> J;\n  real y[J];\n  real<lower=0> sigma[J];\n}\n\nparameters {\n  real mu;\n  real<lower=0> tau;\n  real theta[J];\n}\n\nmodel {\n  mu ~ normal(0, 5);\n  tau ~ cauchy(0, 5);\n  theta ~ normal(mu, tau);\n  y ~ normal(theta, sigma);\n}\n\ngenerated quantities {\n    vector[J] log_lik;\n    vector[J] y_hat;\n    for (j in 1:J) {\n        log_lik[j] = normal_lpdf(y[j] | theta[j], sigma[j]);\n        y_hat[j] = normal_rng(theta[j], sigma[j]);\n    }\n}\n\"\"\"\n\nschools_dat = Dict(\"J\" => J, \"y\" => y, \"sigma\" => σ)\nstan_model = Stanmodel(\n    model = schools_code,\n    name = \"schools\",\n    nchains = nchains,\n    num_warmup = nwarmup,\n    num_samples = nsamples,\n    output_format = :mcmcchains,\n    random = CmdStan.Random(8675309),\n)\n_, stan_chns, _ = stan(stan_model, schools_dat, summary = false);\nBase.Filesystem.rm(stan_model.tmpdir; recursive = true, force = true); # hide\nnothing # hide","category":"page"},{"location":"quickstart.html","page":"Quickstart","title":"Quickstart","text":"plot_density(stan_chns; var_names=[\"mu\", \"tau\"]);\ngcf()","category":"page"},{"location":"quickstart.html","page":"Quickstart","title":"Quickstart","text":"Again, converting to InferenceData, we can get much richer labelling and mixing of data. Note that we're using the same from_cmdstan function used by ArviZ to process cmdstan output files, but through the power of dispatch in Julia, if we pass a Chains object, it instead uses ArviZ.jl's overloads, which forward to from_mcmcchains.","category":"page"},{"location":"quickstart.html","page":"Quickstart","title":"Quickstart","text":"idata = from_cmdstan(\n    stan_chns;\n    posterior_predictive = \"y_hat\",\n    observed_data = Dict(\"y\" => schools_dat[\"y\"]),\n    log_likelihood = \"log_lik\",\n    coords = Dict(\"school\" => schools),\n    dims = Dict(\n        \"y\" => [\"school\"],\n        \"sigma\" => [\"school\"],\n        \"theta\" => [\"school\"],\n        \"log_lik\" => [\"school\"],\n        \"y_hat\" => [\"school\"],\n    ),\n)","category":"page"},{"location":"quickstart.html","page":"Quickstart","title":"Quickstart","text":"Here is a plot showing where the Hamiltonian sampler had divergences:","category":"page"},{"location":"quickstart.html","page":"Quickstart","title":"Quickstart","text":"plot_pair(\n    idata;\n    coords = Dict(\"school\" => [\"Choate\", \"Deerfield\", \"Phillips Andover\"]),\n    divergences = true,\n);\ngcf()","category":"page"},{"location":"quickstart.html#Plotting-with-Soss.jl-outputs","page":"Quickstart","title":"Plotting with Soss.jl outputs","text":"","category":"section"},{"location":"quickstart.html","page":"Quickstart","title":"Quickstart","text":"With Soss, we can define our model for the posterior and easily use it to draw samples from the prior, prior predictive, posterior, and posterior predictive distributions.","category":"page"},{"location":"quickstart.html","page":"Quickstart","title":"Quickstart","text":"First we define our model:","category":"page"},{"location":"quickstart.html","page":"Quickstart","title":"Quickstart","text":"using Soss, NamedTupleTools\n\nmod = Soss.@model (J, σ) begin\n    μ ~ Normal(0, 5)\n    τ ~ HalfCauchy(5)\n    θ ~ Normal(μ, τ) |> iid(J)\n    y ~ For(1:J) do j\n        Normal(θ[j], σ[j])\n    end\nend\n\nconstant_data = (J = J, σ = σ)\nparam_mod = mod(; constant_data...)","category":"page"},{"location":"quickstart.html","page":"Quickstart","title":"Quickstart","text":"Then we draw from the prior and prior predictive distributions.","category":"page"},{"location":"quickstart.html","page":"Quickstart","title":"Quickstart","text":"Random.seed!(5298)\nprior_priorpred = [\n    map(1:nchains*nsamples) do _\n        draw = rand(param_mod)\n        return delete(draw, keys(constant_data))\n    end\n];\nnothing # hide","category":"page"},{"location":"quickstart.html","page":"Quickstart","title":"Quickstart","text":"Next, we draw from the posterior using DynamicHMC.jl.","category":"page"},{"location":"quickstart.html","page":"Quickstart","title":"Quickstart","text":"post = map(1:nchains) do _\n    dynamicHMC(param_mod, (y = y,), nsamples)\nend;\nnothing # hide","category":"page"},{"location":"quickstart.html","page":"Quickstart","title":"Quickstart","text":"Finally, we update the posterior samples with draws from the posterior predictive distribution.","category":"page"},{"location":"quickstart.html","page":"Quickstart","title":"Quickstart","text":"pred = predictive(mod, :μ, :τ, :θ)\npost_postpred = map(post) do post_draws\n    map(post_draws) do post_draw\n        pred_draw = rand(pred(post_draw))\n        pred_draw = delete(pred_draw, keys(constant_data))\n        return merge(pred_draw, post_draw)\n    end\nend;\nnothing # hide","category":"page"},{"location":"quickstart.html","page":"Quickstart","title":"Quickstart","text":"Each Soss draw is a NamedTuple. We can plot the rank order statistics of the posterior to identify poor convergence:","category":"page"},{"location":"quickstart.html","page":"Quickstart","title":"Quickstart","text":"plot_rank(post; var_names = [\"μ\", \"τ\"]);\ngcf()","category":"page"},{"location":"quickstart.html","page":"Quickstart","title":"Quickstart","text":"Now we combine all of the samples to an InferenceData:","category":"page"},{"location":"quickstart.html","page":"Quickstart","title":"Quickstart","text":"idata = from_namedtuple(\n    post_postpred;\n    posterior_predictive = [:y],\n    prior = prior_priorpred,\n    prior_predictive = [:y],\n    observed_data = (y = y,),\n    constant_data = constant_data,\n    coords = Dict(\"school\" => schools),\n    dims = Dict(\n        \"y\" => [\"school\"],\n        \"σ\" => [\"school\"],\n        \"θ\" => [\"school\"],\n    ),\n    library = Soss,\n)","category":"page"},{"location":"quickstart.html","page":"Quickstart","title":"Quickstart","text":"We can compare the prior and posterior predictive distributions:","category":"page"},{"location":"quickstart.html","page":"Quickstart","title":"Quickstart","text":"plot_density(\n    [idata.posterior_predictive, idata.prior_predictive];\n    data_labels = [\"Post-pred\", \"Prior-pred\"],\n    var_names = [\"y\"],\n)\ngcf()","category":"page"},{"location":"quickstart.html#Environment","page":"Quickstart","title":"Environment","text":"","category":"section"},{"location":"quickstart.html","page":"Quickstart","title":"Quickstart","text":"using Pkg\nPkg.status()","category":"page"},{"location":"quickstart.html","page":"Quickstart","title":"Quickstart","text":"using InteractiveUtils\nversioninfo()","category":"page"},{"location":"reference.html#reference","page":"Reference","title":"API Reference","text":"","category":"section"},{"location":"reference.html","page":"Reference","title":"Reference","text":"Modules = [ArviZ]","category":"page"},{"location":"reference.html#ArviZ.rcParams","page":"Reference","title":"ArviZ.rcParams","text":"rcParams\n\nDictionary to contain ArviZ default parameters, with validation when setting items.\n\nExamples\n\njulia> rcParams[\"plot.backend\"]\n\"matplotlib\"\n\njulia> rcParams[\"plot.backend\"] = \"bokeh\"\n\"bokeh\"\n\njulia> rcParams[\"plot.backend\"]\n\"bokeh\"\n\n\n\n","category":"constant"},{"location":"reference.html#ArviZ.BokehPlot","page":"Reference","title":"ArviZ.BokehPlot","text":"BokehPlot(::PyObject)\n\nLoose wrapper around a Bokeh figure, mostly used for dispatch.\n\nIn most cases, use one of the plotting functions with backend=:bokeh to create a BokehPlot instead of using a constructor.\n\n\n\n\n\n","category":"type"},{"location":"reference.html#ArviZ.Dataset","page":"Reference","title":"ArviZ.Dataset","text":"Dataset(::PyObject)\nDataset(; data_vars = nothing, coords = nothing, attrs = nothing)\n\nLoose wrapper around xarray.Dataset, mostly used for dispatch.\n\nKeywords\n\ndata_vars::Dict{String,Any}: Dict mapping variable names to\nVector: Data vector. Single dimension is named after variable.\nTuple{String,Vector}: Dimension name and data vector.\nTuple{NTuple{N,String},Array{T,N}} where {N,T}: Dimension names and data array.\ncoords::Dict{String,Any}: Dict mapping dimension names to index names. Possible   arguments has same form as data_vars.\nattrs::Dict{String,Any}: Global attributes to save on this dataset.\n\nIn most cases, use convert_to_dataset or convert_to_constant_dataset or to create a Dataset instead of directly using a constructor.\n\n\n\n\n\n","category":"type"},{"location":"reference.html#ArviZ.InferenceData","page":"Reference","title":"ArviZ.InferenceData","text":"InferenceData(::PyObject)\nInferenceData(; kwargs...)\n\nLoose wrapper around arviz.InferenceData, which is a container for inference data storage using xarray.\n\nInferenceData can be constructed either from an arviz.InferenceData or from multiple Datasets assigned to groups specified as kwargs.\n\nInstead of directly creating an InferenceData, use the exported from_xyz functions or convert_to_inference_data.\n\n\n\n\n\n","category":"type"},{"location":"reference.html#ArviZ.autocorr","page":"Reference","title":"ArviZ.autocorr","text":"See documentation for arviz.autocorr.\n\n\n\n\n\n","category":"function"},{"location":"reference.html#ArviZ.autocov","page":"Reference","title":"ArviZ.autocov","text":"See documentation for arviz.autocov.\n\n\n\n\n\n","category":"function"},{"location":"reference.html#ArviZ.bfmi","page":"Reference","title":"ArviZ.bfmi","text":"See documentation for arviz.bfmi.\n\n\n\n\n\n","category":"function"},{"location":"reference.html#ArviZ.compare","page":"Reference","title":"ArviZ.compare","text":"See documentation for arviz.compare.\n\n\n\n\n\n","category":"function"},{"location":"reference.html#ArviZ.concat","page":"Reference","title":"ArviZ.concat","text":"See documentation for arviz.concat.\n\n\n\n\n\n","category":"function"},{"location":"reference.html#ArviZ.concat!","page":"Reference","title":"ArviZ.concat!","text":"concat!(data1::InferenceData, data::InferenceData...; kwargs...) -> InferenceData\n\nIn-place version of concat, where data1 is modified to contain the concatenation of data and args. See concat for a description of kwargs.\n\n\n\n","category":"function"},{"location":"reference.html#ArviZ.convert_arguments-Tuple{Any,Vararg{Any,N} where N}","page":"Reference","title":"ArviZ.convert_arguments","text":"convert_arguments(f, args...; kwargs...) -> NTuple{2}\n\nConvert arguments to the function f before calling.\n\nThis function is used primarily for pre-processing arguments within macros before sending to arviz.\n\n\n\n\n\n","category":"method"},{"location":"reference.html#ArviZ.convert_result-Tuple{Any,Any,Vararg{Any,N} where N}","page":"Reference","title":"ArviZ.convert_result","text":"convert_result(f, result, args...)\n\nConvert result of the function f before returning.\n\nThis function is used primarily for post-processing outputs of arviz before returning. The args are primarily used for dispatch.\n\n\n\n\n\n","category":"method"},{"location":"reference.html#ArviZ.convert_to_constant_dataset","page":"Reference","title":"ArviZ.convert_to_constant_dataset","text":"convert_to_constant_dataset(obj::Dict; kwargs...) -> Dataset\nconvert_to_constant_dataset(obj::NamedTuple; kwargs...) -> Dataset\n\nConvert obj into a Dataset.\n\nUnlike convert_to_dataset, this is intended for containing constant parameters such as observed data and constant data, and the first two dimensions are not required to be the number of chains and draws.\n\nKeywords\n\ncoords::Dict{String,Vector}: Map from named dimension to index names\ndims::Dict{String,Vector{String}}: Map from variable name to names of its dimensions\nlibrary::Any: A library associated with the data to add to attrs.\nattrs::Dict{String,Any}: Global attributes to save on this dataset.\n\n\n\n","category":"function"},{"location":"reference.html#ArviZ.convert_to_dataset","page":"Reference","title":"ArviZ.convert_to_dataset","text":"convert_to_dataset(obj; group = :posterior, kwargs...) -> Dataset\n\nConvert a supported object to a Dataset.\n\nIn most cases, this function calls convert_to_inference_data and returns the corresponding group.\n\n\n\n","category":"function"},{"location":"reference.html#ArviZ.convert_to_inference_data","page":"Reference","title":"ArviZ.convert_to_inference_data","text":"See documentation for arviz.convert_to_inference_data.\n\n\n\n\n\n","category":"function"},{"location":"reference.html#ArviZ.convert_to_inference_data-Tuple{MCMCChains.Chains}","page":"Reference","title":"ArviZ.convert_to_inference_data","text":"convert_to_inference_data(obj::Chains; group = :posterior, kwargs...) -> InferenceData\n\nConvert the chains obj to an InferenceData with the specified group.\n\nRemaining kwargs are forwarded to from_mcmcchains.\n\n\n\n\n\n","category":"method"},{"location":"reference.html#ArviZ.convert_to_inference_data-Tuple{MonteCarloMeasurements.AbstractParticles}","page":"Reference","title":"ArviZ.convert_to_inference_data","text":"convert_to_inference_data(obj::AbstractParticles; kwargs...) -> InferenceData\nconvert_to_inference_data(\n    obj::AbstractVector{<:AbstractParticles};\n    kwargs...,\n) -> InferenceData\nconvert_to_inference_data(\n    obj::AbstractVector{<:AbstractArray{<:AbstractParticles}};\n    kwargs...,\n) -> InferenceData\n\nConvert MonteCarloMeasurements.AbstractParticles to an InferenceData.\n\nobj may have the following types:\n\n::AbstractParticles: Univariate draws from a single chain.\n::AbstractVector{<:AbstractParticles}: Univariate draws from a vector of chains.\n::AbstractVector{<:AbstractArray{<:AbstractParticles}}: Multivariate draws from a vector   of chains.\n\n\n\n\n\n","category":"method"},{"location":"reference.html#ArviZ.convert_to_inference_data-Tuple{NamedTuple}","page":"Reference","title":"ArviZ.convert_to_inference_data","text":"convert_to_inference_data(obj::NamedTuple; kwargs...) -> InferenceData\nconvert_to_inference_data(obj::Vector{<:NamedTuple}; kwargs...) -> InferenceData\nconvert_to_inference_data(obj::Matrix{<:NamedTuple}; kwargs...) -> InferenceData\nconvert_to_inference_data(obj::Vector{Vector{<:NamedTuple}}; kwargs...) -> InferenceData\n\nConvert obj to an InferenceData. See from_namedtuple for a description of obj possibilities and kwargs.\n\n\n\n\n\n","category":"method"},{"location":"reference.html#ArviZ.dataset_to_dict","page":"Reference","title":"ArviZ.dataset_to_dict","text":"dataset_to_dict(ds::Dataset) -> Tuple{Dict{String,Array},NamedTuple}\n\nConvert a Dataset to a dictionary of Arrays. The function also returns keyword arguments to dict_to_dataset.\n\n\n\n","category":"function"},{"location":"reference.html#ArviZ.dict_to_dataset","page":"Reference","title":"ArviZ.dict_to_dataset","text":"dict_to_dataset(data::Dict{String,Array}; kwargs...) -> Dataset\n\nConvert a dictionary with data and keys as variable names to a Dataset.\n\nKeywords\n\nattrs::Dict{String,Any}: Json serializable metadata to attach to the dataset, in   addition to defaults.\nlibrary::String: Name of library used for performing inference. Will be attached to the   attrs metadata.\ncoords::Dict{String,Array}: Coordinates for the dataset\ndims::Dict{String,Vector{String}}: Dimensions of each variable. The keys are variable   names, values are vectors of coordinates.\n\nExamples\n\nusing ArviZ\nArviZ.dict_to_dataset(Dict(\"x\" => randn(4, 100), \"y\" => randn(4, 100)))\n\n\n\n","category":"function"},{"location":"reference.html#ArviZ.ess","page":"Reference","title":"ArviZ.ess","text":"See documentation for arviz.ess.\n\n\n\n\n\n","category":"function"},{"location":"reference.html#ArviZ.from_cmdstan","page":"Reference","title":"ArviZ.from_cmdstan","text":"See documentation for arviz.from_cmdstan.\n\n\n\n\n\n","category":"function"},{"location":"reference.html#ArviZ.from_cmdstan-Tuple{MCMCChains.Chains}","page":"Reference","title":"ArviZ.from_cmdstan","text":"from_cmdstan(posterior::Chains; kwargs...) -> InferenceData\n\nCall from_mcmcchains on output of CmdStan.\n\n\n\n\n\n","category":"method"},{"location":"reference.html#ArviZ.from_cmdstanpy","page":"Reference","title":"ArviZ.from_cmdstanpy","text":"See documentation for arviz.from_cmdstanpy.\n\n\n\n\n\n","category":"function"},{"location":"reference.html#ArviZ.from_dict","page":"Reference","title":"ArviZ.from_dict","text":"See documentation for arviz.from_dict.\n\n\n\n\n\n","category":"function"},{"location":"reference.html#ArviZ.from_emcee","page":"Reference","title":"ArviZ.from_emcee","text":"See documentation for arviz.from_emcee.\n\n\n\n\n\n","category":"function"},{"location":"reference.html#ArviZ.from_mcmcchains","page":"Reference","title":"ArviZ.from_mcmcchains","text":"from_mcmcchains(posterior::Chains; kwargs...) -> InferenceData\nfrom_mcmcchains(; kwargs...) -> InferenceData\nfrom_mcmcchains(\n    posterior::Chains,\n    posterior_predictive::Any,\n    predictions::Any,\n    log_likelihood::Any;\n    kwargs...\n) -> InferenceData\n\nConvert data in an MCMCChains.Chains format into an InferenceData.\n\nAny keyword argument below without an an explicitly annotated type above is allowed, so long as it can be passed to convert_to_inference_data.\n\nArguments\n\nposterior::Chains: Draws from the posterior\n\nKeywords\n\nposterior_predictive::Any=nothing: Draws from the posterior predictive distribution or   name(s) of predictive variables in posterior\npredictions::Any=nothing: Out-of-sample predictions for the posterior.\nprior::Any=nothing: Draws from the prior\nprior_predictive::Any=nothing: Draws from the prior predictive distribution or name(s)   of predictive variables in prior\nobserved_data::Dict{String,Array}=nothing: Observed data on which the posterior is   conditional. It should only contain data which is modeled as a random variable. Keys are   parameter names and values.\nconstant_data::Dict{String,Array}=nothing: Model constants, data included in the model   which is not modeled as a random variable. Keys are parameter names and values.\npredictions_constant_data::Dict{String,Array}=nothing: Constants relevant to the model    predictions (i.e. new x values in a linear regression).\nlog_likelihood::Any=nothing: Pointwise log-likelihood for the data. It is recommended    to use this argument as a dictionary whose keys are observed variable names and whose    values are log likelihood arrays.\nlog_likelihood::String=nothing: Name of variable in posterior with log likelihoods\nlibrary=MCMCChains: Name of library that generated the chains\ncoords::Dict{String,Vector}=nothing: Map from named dimension to named indices\ndims::Dict{String,Vector{String}}=nothing: Map from variable name to names of its   dimensions\n\nReturns\n\nInferenceData: The data with groups corresponding to the provided data\n\n\n\n","category":"function"},{"location":"reference.html#ArviZ.from_namedtuple","page":"Reference","title":"ArviZ.from_namedtuple","text":"from_namedtuple(posterior::NamedTuple; kwargs...) -> InferenceData\nfrom_namedtuple(posterior::Vector{<:NamedTuple}; kwargs...) -> InferenceData\nfrom_namedtuple(posterior::Matrix{<:NamedTuple}; kwargs...) -> InferenceData\nfrom_namedtuple(posterior::Vector{Vector{<:NamedTuple}}; kwargs...) -> InferenceData\nfrom_mcmcchains(\n    posterior::NamedTuple,\n    sample_stats::Any,\n    posterior_predictive::Any,\n    predictions::Any,\n    log_likelihood::Any;\n    kwargs...\n) -> InferenceData\n\nConvert a NamedTuple or container of NamedTuples to an InferenceData.\n\nIf containers are passed, they are flattened into a single NamedTuple with array elements whose first dimensions correspond to the dimensions of the containers.\n\nArguments\n\nposterior: The data to be converted. It may be of the following types:\n::NamedTuple: The keys are the variable names and the values are arrays with   dimensions (nchains, ndraws, sizes...).\n::Vector{<:NamedTuple}: Each element is a NamedTuple from a chain with   Array/MonteCarloMeasurements.Particle values with dimensions   (ndraws, sizes...).\n::Matrix{<:NamedTuple}: Each element is a single draw from a single chain, with   array/scalar values with dimensions sizes. The dimensions of the matrix container   are (nchains, ndraws)\n::Vector{Vector{<:NamedTuple}}: The same as the above case.\n\nKeywords\n\nposterior_predictive::Any=nothing: Draws from the posterior predictive distribution\nsample_stats::Any=nothing: Statistics of the posterior sampling process\npredictions::Any=nothing: Out-of-sample predictions for the posterior.\nprior::Any=nothing: Draws from the prior\nprior_predictive::Any=nothing: Draws from the prior predictive distribution\nsample_stats_prior::Any=nothing: Statistics of the prior sampling process\nobserved_data::Dict{String,Array}=nothing: Observed data on which the posterior is    conditional. It should only contain data which is modeled as a random variable. Keys    are parameter names and values.\nconstant_data::Dict{String,Array}=nothing: Model constants, data included in the model    which is not modeled as a random variable. Keys are parameter names and values.\npredictions_constant_data::Dict{String,Array}=nothing: Constants relevant to the model    predictions (i.e. new x values in a linear regression).\nlog_likelihood::Any=nothing: Pointwise log-likelihood for the data. It is recommended    to use this argument as a dictionary whose keys are observed variable names and whose    values are log likelihood arrays.\nlibrary=nothing: Name of library that generated the draws\ncoords::Dict{String,Vector}=nothing: Map from named dimension to named indices\ndims::Dict{String,Vector{String}}=nothing: Map from variable name to names of its    dimensions\n\nReturns\n\nInferenceData: The data with groups corresponding to the provided data\n\nExamples\n\nusing ArviZ\nnchains, ndraws = 2, 10\n\ndata1 = (\n    x = rand(nchains, ndraws),\n    y = randn(nchains, ndraws, 2),\n    z = randn(nchains, ndraws, 3, 2),\n)\nidata1 = from_namedtuple(data1)\n\ndata2 = [(x = rand(ndraws), y = randn(ndraws, 2), z = randn(ndraws, 3, 2)) for _ = 1:nchains];\nidata2 = from_namedtuple(data2)\n\ndata3 = [(x = rand(), y = randn(2), z = randn(3, 2)) for _ = 1:nchains, _ = 1:ndraws];\nidata3 = from_namedtuple(data3)\n\ndata4 = [[(x = rand(), y = randn(2), z = randn(3, 2)) for _ = 1:ndraws] for _ = 1:nchains];\nidata4 = from_namedtuple(data4)\n\n\n\n","category":"function"},{"location":"reference.html#ArviZ.from_netcdf","page":"Reference","title":"ArviZ.from_netcdf","text":"See documentation for arviz.from_netcdf.\n\n\n\n\n\n","category":"function"},{"location":"reference.html#ArviZ.from_numpyro","page":"Reference","title":"ArviZ.from_numpyro","text":"See documentation for arviz.from_numpyro.\n\n\n\n\n\n","category":"function"},{"location":"reference.html#ArviZ.from_pymc3","page":"Reference","title":"ArviZ.from_pymc3","text":"See documentation for arviz.from_pymc3.\n\n\n\n\n\n","category":"function"},{"location":"reference.html#ArviZ.from_pyro","page":"Reference","title":"ArviZ.from_pyro","text":"See documentation for arviz.from_pyro.\n\n\n\n\n\n","category":"function"},{"location":"reference.html#ArviZ.from_pystan","page":"Reference","title":"ArviZ.from_pystan","text":"See documentation for arviz.from_pystan.\n\n\n\n\n\n","category":"function"},{"location":"reference.html#ArviZ.from_tfp","page":"Reference","title":"ArviZ.from_tfp","text":"See documentation for arviz.from_tfp.\n\n\n\n\n\n","category":"function"},{"location":"reference.html#ArviZ.geweke","page":"Reference","title":"ArviZ.geweke","text":"See documentation for arviz.geweke.\n\n\n\n\n\n","category":"function"},{"location":"reference.html#ArviZ.groupnames-Tuple{InferenceData}","page":"Reference","title":"ArviZ.groupnames","text":"groupnames(data::InferenceData) -> Vector{Symbol}\n\nGet the names of the groups (datasets) in data.\n\n\n\n\n\n","category":"method"},{"location":"reference.html#ArviZ.groups-Tuple{InferenceData}","page":"Reference","title":"ArviZ.groups","text":"groups(data::InferenceData) -> Dict{Symbol,Dataset}\n\nGet the groups in data as a dictionary mapping names to datasets.\n\n\n\n\n\n","category":"method"},{"location":"reference.html#ArviZ.hdi","page":"Reference","title":"ArviZ.hdi","text":"See documentation for arviz.hdi.\n\n\n\n\n\n","category":"function"},{"location":"reference.html#ArviZ.load_arviz_data","page":"Reference","title":"ArviZ.load_arviz_data","text":"See documentation for arviz.load_arviz_data.\n\n\n\n\n\n","category":"function"},{"location":"reference.html#ArviZ.loo","page":"Reference","title":"ArviZ.loo","text":"See documentation for arviz.loo.\n\n\n\n\n\n","category":"function"},{"location":"reference.html#ArviZ.loo_pit","page":"Reference","title":"ArviZ.loo_pit","text":"See documentation for arviz.loo_pit.\n\n\n\n\n\n","category":"function"},{"location":"reference.html#ArviZ.make_ufunc","page":"Reference","title":"ArviZ.make_ufunc","text":"See documentation for arviz.make_ufunc.\n\n\n\n\n\n","category":"function"},{"location":"reference.html#ArviZ.mcse","page":"Reference","title":"ArviZ.mcse","text":"See documentation for arviz.mcse.\n\n\n\n\n\n","category":"function"},{"location":"reference.html#ArviZ.plot_autocorr","page":"Reference","title":"ArviZ.plot_autocorr","text":"See documentation for arviz.plot_autocorr.\n\n\n\n\n\n","category":"function"},{"location":"reference.html#ArviZ.plot_compare","page":"Reference","title":"ArviZ.plot_compare","text":"See documentation for arviz.plot_compare.\n\n\n\n\n\n","category":"function"},{"location":"reference.html#ArviZ.plot_density","page":"Reference","title":"ArviZ.plot_density","text":"See documentation for arviz.plot_density.\n\n\n\n\n\n","category":"function"},{"location":"reference.html#ArviZ.plot_dist","page":"Reference","title":"ArviZ.plot_dist","text":"See documentation for arviz.plot_dist.\n\n\n\n\n\n","category":"function"},{"location":"reference.html#ArviZ.plot_elpd","page":"Reference","title":"ArviZ.plot_elpd","text":"See documentation for arviz.plot_elpd.\n\n\n\n\n\n","category":"function"},{"location":"reference.html#ArviZ.plot_energy","page":"Reference","title":"ArviZ.plot_energy","text":"See documentation for arviz.plot_energy.\n\n\n\n\n\n","category":"function"},{"location":"reference.html#ArviZ.plot_ess","page":"Reference","title":"ArviZ.plot_ess","text":"See documentation for arviz.plot_ess.\n\n\n\n\n\n","category":"function"},{"location":"reference.html#ArviZ.plot_forest","page":"Reference","title":"ArviZ.plot_forest","text":"See documentation for arviz.plot_forest.\n\n\n\n\n\n","category":"function"},{"location":"reference.html#ArviZ.plot_hdi","page":"Reference","title":"ArviZ.plot_hdi","text":"See documentation for arviz.plot_hdi.\n\n\n\n\n\n","category":"function"},{"location":"reference.html#ArviZ.plot_kde","page":"Reference","title":"ArviZ.plot_kde","text":"See documentation for arviz.plot_kde.\n\n\n\n\n\n","category":"function"},{"location":"reference.html#ArviZ.plot_khat","page":"Reference","title":"ArviZ.plot_khat","text":"See documentation for arviz.plot_khat.\n\n\n\n\n\n","category":"function"},{"location":"reference.html#ArviZ.plot_loo_pit","page":"Reference","title":"ArviZ.plot_loo_pit","text":"See documentation for arviz.plot_loo_pit.\n\n\n\n\n\n","category":"function"},{"location":"reference.html#ArviZ.plot_mcse","page":"Reference","title":"ArviZ.plot_mcse","text":"See documentation for arviz.plot_mcse.\n\n\n\n\n\n","category":"function"},{"location":"reference.html#ArviZ.plot_pair","page":"Reference","title":"ArviZ.plot_pair","text":"See documentation for arviz.plot_pair.\n\n\n\n\n\n","category":"function"},{"location":"reference.html#ArviZ.plot_parallel","page":"Reference","title":"ArviZ.plot_parallel","text":"See documentation for arviz.plot_parallel.\n\n\n\n\n\n","category":"function"},{"location":"reference.html#ArviZ.plot_posterior","page":"Reference","title":"ArviZ.plot_posterior","text":"See documentation for arviz.plot_posterior.\n\n\n\n\n\n","category":"function"},{"location":"reference.html#ArviZ.plot_ppc","page":"Reference","title":"ArviZ.plot_ppc","text":"See documentation for arviz.plot_ppc.\n\n\n\n\n\n","category":"function"},{"location":"reference.html#ArviZ.plot_rank","page":"Reference","title":"ArviZ.plot_rank","text":"See documentation for arviz.plot_rank.\n\n\n\n\n\n","category":"function"},{"location":"reference.html#ArviZ.plot_trace","page":"Reference","title":"ArviZ.plot_trace","text":"See documentation for arviz.plot_trace.\n\n\n\n\n\n","category":"function"},{"location":"reference.html#ArviZ.plot_violin","page":"Reference","title":"ArviZ.plot_violin","text":"See documentation for arviz.plot_violin.\n\n\n\n\n\n","category":"function"},{"location":"reference.html#ArviZ.psislw","page":"Reference","title":"ArviZ.psislw","text":"See documentation for arviz.psislw.\n\n\n\n\n\n","category":"function"},{"location":"reference.html#ArviZ.r2_score","page":"Reference","title":"ArviZ.r2_score","text":"See documentation for arviz.r2_score.\n\n\n\n\n\n","category":"function"},{"location":"reference.html#ArviZ.reshape_values-Union{Tuple{AbstractArray{T,N}}, Tuple{N}, Tuple{T}} where N where T","page":"Reference","title":"ArviZ.reshape_values","text":"reshape_values(x::AbstractArray) -> AbstractArray\n\nConvert from MCMCChains variable values with dimensions (ndraw, size..., nchain) to ArviZ's expected (nchain, ndraw, size...).\n\n\n\n\n\n","category":"method"},{"location":"reference.html#ArviZ.rhat","page":"Reference","title":"ArviZ.rhat","text":"See documentation for arviz.rhat.\n\n\n\n\n\n","category":"function"},{"location":"reference.html#ArviZ.stack-Tuple{Any}","page":"Reference","title":"ArviZ.stack","text":"stack(x::NamedTuple) -> NamedTuple\nstack(x::AbstractArray{NamedTuple}) -> NamedTuple\nstack(x::AbstractArray{AbstractArray{<:NamedTuple}}) -> NamedTuple\n\nGiven a container of NamedTuples, concatenate them, using the container dimensions as the dimensions of the resulting arrays.\n\nExamples\n\nusing ArviZ\nnchains, ndraws = 4, 100\ndata = [(x = rand(), y = randn(2), z = randn(2, 3)) for _ in 1:nchains, _ in 1:ndraws];\nstacked_data = ArviZ.stack(data);\n\n\n\n\n\n","category":"method"},{"location":"reference.html#ArviZ.styles-Tuple{}","page":"Reference","title":"ArviZ.styles","text":"styles() -> Vector{String}\n\nGet all available matplotlib styles for use with use_style\n\n\n\n\n\n","category":"method"},{"location":"reference.html#ArviZ.summary-Tuple{Any}","page":"Reference","title":"ArviZ.summary","text":"summary(\n    data;\n    group = :posterior,\n    coords = nothing,\n    dims = nothing,\n    kwargs...,\n) -> Union{Dataset,DataFrames.DataFrame}\n\nCompute summary statistics on any object that can be passed to convert_to_dataset.\n\nKeywords\n\ncoords::Dict{String,Vector}=nothing: Map from named dimension to named indices.\ndims::Dict{String,Vector{String}}=nothing: Map from variable name to names of its   dimensions.\nkwargs: Keyword arguments passed to summarystats.\n\n\n\n\n\n","category":"method"},{"location":"reference.html#ArviZ.to_netcdf","page":"Reference","title":"ArviZ.to_netcdf","text":"See documentation for arviz.to_netcdf.\n\n\n\n\n\n","category":"function"},{"location":"reference.html#ArviZ.todataframes-Tuple{Val{:DataFrame},PyCall.PyObject}","page":"Reference","title":"ArviZ.todataframes","text":"todataframes(df; index_name = nothing) -> DataFrames.DataFrame\n\nConvert a Python pandas.DataFrame or pandas.Series into a DataFrames.DataFrame.\n\nIf index_name is not nothing, the index is converted into a column with index_name. Otherwise, it is discarded.\n\n\n\n\n\n","category":"method"},{"location":"reference.html#ArviZ.topandas-Tuple{Val{:DataFrame},Any}","page":"Reference","title":"ArviZ.topandas","text":"topandas(::Type{:DataFrame}, df; index_name = nothing) -> PyObject\ntopandas(::Type{:Series}, df) -> PyObject\ntopandas(::Val{:ELPDData}, df) -> PyObject\n\nConvert a DataFrames.DataFrame to the specified pandas type.\n\nIf index_name is not nothing, the corresponding column is made the index of the returned dataframe.\n\n\n\n\n\n","category":"method"},{"location":"reference.html#ArviZ.use_style-Tuple{Any}","page":"Reference","title":"ArviZ.use_style","text":"use_style(style::String)\nuse_style(style::Vector{String})\n\nUse matplotlib style settings from a style specification style.\n\nThe style name of \"default\" is reserved for reverting back to the default style settings.\n\nArviZ-specific styles are [\"arviz-whitegrid\", \"arviz-darkgrid\", \"arviz-colors\", \"arviz-white\"]. To see all available style specifications, use styles().\n\nIf a Vector of styles is provided, they are applied from first to last.\n\n\n\n\n\n","category":"method"},{"location":"reference.html#ArviZ.waic","page":"Reference","title":"ArviZ.waic","text":"See documentation for arviz.waic.\n\n\n\n\n\n","category":"function"},{"location":"reference.html#ArviZ.with_interactive_backend","page":"Reference","title":"ArviZ.with_interactive_backend","text":"with_interactive_backend(f; backend::Symbol = nothing)\n\nExecute the thunk f in a temporary interactive context with the chosen backend, or provide no arguments to use a default.\n\nExamples\n\nidata = load_arviz_data(\"centered_eight\")\nplot_posterior(idata) # inline\nwith_interactive_backend() do\n    plot_density(idata) # interactive\nend\nplot_trace(idata) # inline\n\n\n\n","category":"function"},{"location":"reference.html#ArviZ.with_rc_context","page":"Reference","title":"ArviZ.with_rc_context","text":"with_rc_context(f; rc = nothing, fname = nothing)\n\nExecute the thunk f within a context controlled by temporary rc params.\n\nSee rcParams for supported params or to modify params long-term.\n\nExamples\n\nwith_rc_context(fname = \"pystan.rc\") do\n    idata = load_arviz_data(\"radon\")\n    plot_posterior(idata; var_names=[\"gamma\"])\nend\n\nThe plot would have settings from pystan.rc.\n\nA dictionary can also be passed to the context manager:\n\nwith_rc_context(rc = Dict(\"plot.max_subplots\" => 1), fname = \"pystan.rc\") do\n    idata = load_arviz_data(\"radon\")\n    plot_posterior(idata, var_names=[\"gamma\"])\nend\n\nThe rc dictionary takes precedence over the settings loaded from fname. Passing a dictionary only is also valid.\n\n\n\n","category":"function"},{"location":"reference.html#ArviZ.wrap_xarray_ufunc","page":"Reference","title":"ArviZ.wrap_xarray_ufunc","text":"See documentation for arviz.wrap_xarray_ufunc.\n\n\n\n\n\n","category":"function"},{"location":"reference.html#Base.write-Tuple{IO,ArviZ.BokehPlot}","page":"Reference","title":"Base.write","text":"write(io::IO, plot::BokehPlot)\nwrite(filename::AbstractString, plot::BokehPlot)\n\nWrite the HTML representation of the Bokeh plot to the I/O stream or file.\n\n\n\n\n\n","category":"method"},{"location":"reference.html#StatsBase.summarystats-Tuple{InferenceData}","page":"Reference","title":"StatsBase.summarystats","text":"summarystats(\n    data::InferenceData;\n    group = :posterior,\n    kwargs...,\n) -> Union{Dataset,DataFrames.DataFrame}\nsummarystats(data::Dataset; kwargs...) -> Union{Dataset,DataFrames.DataFrame}\n\nCompute summary statistics on data.\n\nArguments\n\ndata::Union{Dataset,InferenceData}: The data on which to compute summary statistics. If   data is an InferenceData, only the dataset corresponding to group is used.\n\nKeywords\n\nvar_names::Vector{String}=nothing: Names of variables to include in summary\ninclude_circ::Bool=false: Whether to include circular statistics\nfmt::String=\"wide\": Return format is either DataFrames.DataFrame (\"wide\", \"long\") or   Dataset (\"xarray\").\nround_to::Int=nothing: Number of decimals used to round results. Use nothing to return   raw numbers.\nstat_funcs::Union{Dict{String,Function},Vector{Function}}=nothing: A vector of functions   or a dict of functions with function names as keys used to calculate statistics. By   default, the mean, standard deviation, simulation standard error, and highest posterior   density intervals are included.   The functions will be given one argument, the samples for a variable as an array, The   functions should operate on an array, returning a single number. For example,   Statistics.mean, or Statistics.var would both work.\nextend::Bool=true: If true, use the statistics returned by stat_funcs in addition   to, rather than in place of, the default statistics. This is only meaningful when   stat_funcs is not nothing.\nhdi_prob::Real=0.94: HDI interval to compute. This is only meaningful when stat_funcs   is nothing.\norder::String=\"C\": If fmt is \"wide\", use either \"C\" or \"F\" unpacking order.\nindex_origin::Int=1: If fmt is \"wide\", select 𝑛-based indexing for multivariate   parameters.\nskipna::Bool=false: If true, ignores NaN values when computing the summary   statistics. It does not affect the behaviour of the functions passed to stat_funcs.\ncoords::Dict{String,Vector}=Dict(): Coordinates specification to be used if the fmt   is \"xarray\".\ndims::Dict{String,Vector}=Dict(): Dimensions specification for the variables to be used   if the fmt is \"xarray\".\n\nReturns\n\nUnion{Dataset,DataFrames.DataFrame}: Return type dicated by fmt argument. Return value   will contain summary statistics for each variable. Default statistics are:\nmean\nsd\nhdi_3%\nhdi_97%\nmcse_mean\nmcse_sd\ness_bulk\ness_tail\nr_hat (only computed for traces with 2 or more chains)\n\nExamples\n\nusing ArviZ\nidata = load_arviz_data(\"centered_eight\")\nsummarystats(idata; var_names=[\"mu\", \"tau\"])\n\nOther statistics can be calculated by passing a list of functions or a dictionary with key, function pairs:\n\nusing StatsBase, Statistics\nfunction median_sd(x)\n    med = median(x)\n    sd = sqrt(mean((x .- med).^2))\n    return sd\nend\n\nfunc_dict = Dict(\n    \"std\" => x -> std(x; corrected = false),\n    \"median_std\" => median_sd,\n    \"5%\" => x -> percentile(x, 5),\n    \"median\" => median,\n    \"95%\" => x -> percentile(x, 95),\n)\n\nsummarystats(idata; var_names = [\"mu\", \"tau\"], stat_funcs = func_dict, extend = false)\n\n\n\n","category":"method"},{"location":"reference.html#ArviZ.@forwardfun-Tuple{Any}","page":"Reference","title":"ArviZ.@forwardfun","text":"@forwardfun f\n@forwardfun(f)\n\nWrap a function arviz.f in f, forwarding its docstrings.\n\nUse convert_arguments and convert_result to customize what is passed to and returned from f.\n\n\n\n\n\n","category":"macro"},{"location":"reference.html#ArviZ.@forwardplotfun-Tuple{Any}","page":"Reference","title":"ArviZ.@forwardplotfun","text":"@forwardplotfun f\n@forwardplotfun(f)\n\nWrap a plotting function arviz.f in f, forwarding its docstrings.\n\nThis macro also ensures that outputs for the different backends are correctly handled. Use convert_arguments and convert_result to customize what is passed to and returned from f.\n\n\n\n\n\n","category":"macro"},{"location":"bokeh_examples.html#Bokeh-Example-Gallery","page":"Bokeh","title":"Bokeh Example Gallery","text":"","category":"section"},{"location":"bokeh_examples.html","page":"Bokeh","title":"Bokeh","text":"note: Note\nSee ArviZ's bokeh gallery for examples.","category":"page"},{"location":"index.html#arvizjl","page":"Home","title":"ArviZ.jl: Exploratory analysis of Bayesian models in Julia","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"(Image: Build Status) (Image: Build Status) (Image: codecov.io) (Image: Code Style: Blue)","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"ArviZ.jl is a Julia interface to the ArviZ package for exploratory analysis of Bayesian models.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Please see ArviZ's documentation for detailed descriptions of features and usage. See for example the gallery for a sample of the plots and backends ArviZ supports.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"This documentation will focus on differences between ArviZ.jl and ArviZ, applications using Julia's probabilistic programming languages (PPLs), and examples in Julia.","category":"page"},{"location":"index.html#purpose","page":"Home","title":"Purpose","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Besides removing the need to explicitly import ArviZ with PyCall.jl, ArviZ.jl extends ArviZ with functionality for converting Julia types into ArviZ's InferenceData format. It also allows smoother usage with PyPlot.jl and provides functions that can be overloaded by other packages to enable their types to be used with ArviZ.","category":"page"},{"location":"index.html#installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"To use with the default Python environment, first install ArviZ. Then in Julia's REPL run","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"] add ArviZ","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"To install ArviZ.jl with its Python dependencies in Julia's private conda environment, in the console run","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"PYTHON=\"\" julia -e 'using Pkg; Pkg.add(\"PyCall\"); Pkg.build(\"PyCall\"); Pkg.add(\"ArviZ\")'","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"For specifying other Python versions, see the PyCall documentation.","category":"page"},{"location":"index.html#design","page":"Home","title":"Design","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"ArviZ.jl supports all of ArviZ's API, except for its Numba functionality. See ArviZ's API documentation for details.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"ArviZ.jl wraps ArviZ's API functions and closely follows ArviZ's design. It also supports conversion of MCMCChains.jl's Chains as returned by Turing.jl, CmdStan.jl, StanSample.jl, and others into ArviZ's InferenceData format. See Quickstart for examples.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"The package is intended to be used with PyPlot.jl.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"ArviZ.jl development occurs on GitHub. Issues and pull requests are welcome.","category":"page"},{"location":"index.html#differences","page":"Home","title":"Differences from ArviZ","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"In ArviZ, functions in the API are usually called with the package name prefix, (e.g. arviz.plot_posterior). In ArviZ.jl, most of the same functions are exported and therefore can be called without the prefix (e.g. plot_posterior). The exception are from_xyz converters for packages that have no (known) Julia wrappers. These functions are not exported to reduce namespace clutter.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"For InferenceData inputs, summarystats replaces arviz.summary to avoid confusion with Base.summary. For arbitrary inputs and the full functionality of arviz.summary, use ArviZ.summary, which is not exported.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"ArviZ.jl transparently interconverts between arviz.InferenceData and our own InferenceData, used for dispatch. InferenceData has identical usage to its Python counterpart.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Functions that in ArviZ return Pandas types here return DataFrames.jl types.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"ArviZ includes the context managers rc_context and interactive_backend. ArviZ.jl includes the functions with_rc_context and with_interactive_backend, which can be used with a nearly identical syntax. with_interactive_backend here is not limited to an IPython/IJulia context.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"In place of arviz.style.use and arviz.style.available, ArviZ.jl provides ArviZ.use_style and ArviZ.styles.","category":"page"},{"location":"index.html#extendingarviz","page":"Home","title":"Extending ArviZ.jl","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"To use a custom data type with ArviZ.jl, simply overload convert_to_inference_data to convert your input(s) to an InferenceData.","category":"page"},{"location":"index.html#knownissues","page":"Home","title":"Known Issues","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"ArviZ.jl uses PyCall.jl to wrap ArviZ. At the moment, Julia segfaults if Numba is imported, which ArviZ does if it is available. For the moment, the workaround is to specify a Python version that doesn't have Numba installed. See this issue for more details.","category":"page"}]
}
